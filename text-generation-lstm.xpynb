from keras.preprocessing.text import Tokenizer
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Embedding, LSTM, Dense, Dropout
from keras.utils import pad_sequences
from tensorflow.keras.utils import to_categorical
import requests
import string
import numpy as np

# Reading a text file
with open('/kaggle/input/poem-generation/poem.txt', 'r') as file:
    data = file.read()


data.lower().split('\n')
len(data)
data = "".join(data)

import string

def clean_text(doc):
    # Translation table for removing punctuation
    table = str.maketrans('', '', string.punctuation)
    
    # Tokenize the document and remove punctuation
    tokens = doc.split()
    tokens = [w.translate(table) for w in tokens]
    
    # Remove non-alphabetic words and convert to lowercase
    tokens = [word.lower() for word in tokens if word.isalpha()]
    
    return tokens

tokens = clean_text(data)
print(tokens[:20])

len(tokens)
len(set(tokens))

length = 20+1
lines = []   #predicting next word or text
for i in range(length,len(tokens)):
    seq = tokens[i-length:i]
    line = ' '.join(seq)
    lines.append(line)
    #if i <= 100000:
       # break
    
print(len(lines))    
lines[0]

tokenizer = Tokenizer()
tokenizer.fit_on_texts(lines)
sequences = tokenizer.texts_to_sequences(lines)

# Convert sequences to a NumPy array
sequences = np.array(sequences)

# Split into X and y
X, y = sequences[:, :-1], sequences[:, -1]
X[0]

vocab_size = len(tokenizer.word_index)+1
y = to_categorical(y,num_classes=vocab_size)
seq_length = X.shape[1]

model = Sequential()
model.add(Embedding(vocab_size, 20, input_length=seq_length))
model.add(LSTM(100,return_sequences=True))
model.add(LSTM(100,return_sequences=True))
model.add(LSTM(100))
model.add(Dense(100, activation='relu'))
model.add(Dense(vocab_size, activation='softmax'))

import tensorflow as tf
from tensorflow.keras.optimizers import Adam

# Other imports and model definition go here

optimizer = Adam(learning_rate=0.001)
model.compile(loss='categorical_crossentropy', optimizer=optimizer, metrics=['accuracy'])
model.fit(X,y, epochs=1000, batch_size=32)

seed_text = lines[100]
seed_text

def generate_text(model, tokenizer, text_seq_length, seed_text, n_words):
    text = []
    for _ in range(n_words):
        encoded = tokenizer.texts_to_sequences([seed_text])[0]
        encoded = pad_sequences([encoded], maxlen=text_seq_length, truncating='pre')
        
        y_predict = model.predict(encoded)
        predicted_index = np.argmax(y_predict)
        predicted_word = tokenizer.index_word[predicted_index]
        
        seed_text = seed_text + ' ' + predicted_word
        text.append(predicted_word)
    return ' '.join(text)

generate_text(model, tokenizer, seq_length, seed_text,500)


# saving the model
model.save("text_generation_model.h5")
